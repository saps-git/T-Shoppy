{"ast":null,"code":"import { API } from \"../../backend\";\nimport { cartEmpty } from \"../../core/helper/cartHelper\";\nexport const signup = user => {\n  return fetch(`${API}user/`, {\n    //hitting the API\n    method: \"POST\",\n    // method\n    headers: {\n      // have to write, when sending data in JSON format\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user) // data that is being sent\n\n  }).then(response => {\n    // fetching the response\n    return response.json(); // returning in json format\n  }).catch(err => console.log(err)); // if we get an error\n};\nexport const signin = user => {\n  const formData = new FormData(); //when want to send as a form data\n\n  for (const name in user) {\n    // to add any other field\n    console.log(user[name]);\n    formData.append(name, user[name]); // appending that data(name) in that particular field in user (user[name])\n  } // Above can be written as \n\n  /*\n  const {email, password} = user;\n  const formData = new FormData();\n   formData.append('email', email)\n  formData.append('passsword', password)\n   */\n\n\n  for (var key of formData.keys()) {\n    console.log(\"MYKEY: \", key);\n  }\n\n  return fetch(`${API}user/login/`, {\n    method: \"POST\",\n    body: formData\n  }).then(response => {\n    console.log(\"SUCCESS\", response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const authenticate = (data, next) => {\n  if (typeof window !== undefined) {\n    localStorage.setItem(\"jwt\", JSON.stringify(data));\n    next();\n  }\n};\nexport const isAuthenticated = () => {\n  if (typeof window == undefined) {\n    return false;\n  }\n\n  if (localStorage.getItem(\"jwt\")) {\n    return JSON.parse(localStorage.getItem(\"jwt\")); //TODO: compare JWT with database json token\n  } else {\n    return false;\n  }\n};\nexport const signout = next => {\n  const userId = isAuthenticated() && isAuthenticated().user.id;\n  console.log(\"USERID: \", userId);\n\n  if (typeof window !== undefined) {\n    localStorage.removeItem(\"jwt\");\n    cartEmpty(() => {}); //next();\n\n    return fetch(`${API}user/logout/${userId}`, {\n      method: \"GET\"\n    }).then(response => {\n      console.log(\"Signout success\");\n      next();\n    }).catch(err => console.log(err));\n  }\n};","map":{"version":3,"sources":["/home/saptarshi/Projects/tshoppy/frontend/ecom/src/auth/helper/index.js"],"names":["API","cartEmpty","signup","user","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","catch","err","console","log","signin","formData","FormData","name","append","key","keys","authenticate","data","next","window","undefined","localStorage","setItem","isAuthenticated","getItem","parse","signout","userId","id","removeItem"],"mappings":"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","sourcesContent":["import { API } from \"../../backend\"\nimport { cartEmpty } from \"../../core/helper/cartHelper\"\n\nexport const signup = (user) => {\n    return fetch(`${API}user/`, { //hitting the API\n        method : \"POST\", // method\n        headers: { // have to write, when sending data in JSON format\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(user) // data that is being sent\n    })\n    .then((response) => { // fetching the response\n        return response.json() // returning in json format\n    })\n    .catch((err) => console.log(err)) // if we get an error\n}\n\nexport const signin = (user) => {\n    const formData = new FormData() //when want to send as a form data\n\n    for(const name in user){ // to add any other field\n        console.log(user[name]);\n        formData.append(name, user[name]) // appending that data(name) in that particular field in user (user[name])\n    }\n\n    // Above can be written as \n    /*\n    const {email, password} = user;\n    const formData = new FormData();\n\n    formData.append('email', email)\n    formData.append('passsword', password)\n\n    */\n\n   for (var key of formData.keys()) {\n    console.log(\"MYKEY: \", key);\n  }\n\n  return fetch(`${API}user/login/`, {\n    method: \"POST\",\n\n    body: formData,\n  })\n    .then((response) => {\n      console.log(\"SUCCESS\", response);\n      return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const authenticate = (data, next) => {\n  if (typeof window !== undefined) {\n    localStorage.setItem(\"jwt\", JSON.stringify(data));\n    next();\n  }\n};\n\nexport const isAuthenticated = () => {\n  if (typeof window == undefined) {\n    return false;\n  }\n  if (localStorage.getItem(\"jwt\")) {\n    return JSON.parse(localStorage.getItem(\"jwt\"));\n    //TODO: compare JWT with database json token\n  } else {\n    return false;\n  }\n};\n\nexport const signout = (next) => {\n  const userId = isAuthenticated() && isAuthenticated().user.id;\n\n  console.log(\"USERID: \", userId);\n\n  if (typeof window !== undefined) {\n    localStorage.removeItem(\"jwt\");\n    cartEmpty(() => {});\n    //next();\n\n    return fetch(`${API}user/logout/${userId}`, {\n      method: \"GET\",\n    })\n      .then((response) => {\n        console.log(\"Signout success\");\n        next();\n      })\n      .catch((err) => console.log(err));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}